app.js file comments

Line 5 // Importing Route files:
    Every route in the routes folder has to be reported here in the server file as this is the engine of the application (or system). So notice that we <require> it because it was exported within it using the statement module.exports.

COMMENT ON CODE ENTRY: 
const registerRoutes = require('./routes/registerRoutes');

  if we had not exported and then come and required the routes file or module here, at some point an error will be thrown so module.exports registerRoutes.js is essential. We've imported the routes by the above statement but how do we use them. Look for the section of routes and there insert app.use. These routes come in here and are looked at as middleware but we've designed them by ourselves.

COMMENT ON CODE ENTRY:
app.use('./', registerRoutes); 

  The above entry means that e.g. if one is in your sys and wants to find a route that exists in the routes represented by the variable name registerRoutes which points to the registrations routes module registerRoutes.js they must go through the /user gate.


registerRoutes.js file comments---------**

LINE 2: COMMENT ON CODE ENTRY: const router = express.Router();
  // this has the powers to enable us access the different methods POST, GET, PUT

COMMENT ON CODE ENTRY: module.exports = router;
 This exports the registerRoutes.js module. It must be exported for other files to access this module. For every individual route file is looked at as a module. It has first to be xported for it to be available for us in another file. This exposes it to be used in another file. This has to be the last line in the routes' file else whatever is below will not be read.

COMMENT ON CODE ENTRY UNDER: Agricultural Officer registration/signup form

 Adding code to the routes file just in case one tries to login or signup with similar key credentials.

let useridExists = await Registration.findOne({userid:req.body.userid})
 you can add other key fields in the same way as above e.g. unique id no. and then you'd use elseif elseif elseif for any additional key fields above
 
 Note that you have to create different variable for each just as in the representative construct.

 COMMENT ON CODE ENTRY UNDER: 
// Getting particular list. This is not a normal get route coz it has to fetch data so it must enable us to communicate with the db

How do you get a list of registerees existing in the same database e.g. according to role? We're going to have a route for getting each particular list in the system.

code line:  res.render('farmer-one-list', {farmerones:items})
farmerones is the name you want to call them in your pug files or frontend and is the one you go with in the pug file. 
You start from the route so it is the route to guide you on how to call it in the pug file.
Whatever is in "items" is found in farmerones;

code line: res.render('farmer-one-list', {farmerones:items})
You are passing on powers from items to farmerones variable. Forget about the let or var keyword. farmerones is now a variable standing in the name of the variable name items.

About routes, you can create different routes files but remember to import(require) them into and (app.use) them in the app.js. And call them meaningful names eg. agriculturalroutes, registrationroutes, so if someone reads your code they know there is more than one route in there.
 
Separating concerns means whatever routes concern the AO could be put into one routes file.